[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cpu-monitor"
version = "2.0.0"
authors = [
    {name = "John Mulder", email = "johnmulder@gmail.com"}
]
description = "A modular CPU utilization monitoring application with layered architecture"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = [
    "cpu", "monitoring", "utilization", "system", "performance",
    "gui", "tkinter", "real-time"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Topic :: Desktop Environment",
]
dependencies = [
    "psutil>=5.9.0"
]

[project.urls]
Homepage = "https://github.com/johnmulder/cpu-monitor"
Repository = "https://github.com/johnmulder/cpu-monitor.git"
Issues = "https://github.com/johnmulder/cpu-monitor/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
]
gui = [
    # tkinter is usually included with Python, but explicit for clarity
]

[project.scripts]
cpu-monitor = "cpu_monitor.main:main"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
cpu_monitor = ["*.md", "*.txt", "*.cfg"]

# Development tool configurations
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312", "py313", "py314"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E203", # whitespace before ':'
    "W503", # line break before binary operator
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["B018"] # Allow unused expressions in tests

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=95"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tkinter.*"
ignore_missing_imports = true

[tool.coverage.run]
source = ["src/cpu_monitor"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

# Note: flake8 configuration is commented out since we're using ruff
# [tool.flake8]
# max-line-length = 88
# extend-ignore = ["E203", "W503"]
# max-complexity = 10
# select = ["C", "E", "F", "W", "B", "B950"]
# exclude = [
#     ".git",
#     "__pycache__",
#     ".venv",
#     ".eggs",
#     "*.egg",
#     "build",
#     "dist"
# ]
